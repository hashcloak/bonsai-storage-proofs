// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

pragma solidity ^0.8.17;
import {console2} from "forge-std/console2.sol";

import {BonsaiTest} from "bonsai/BonsaiTest.sol";
import {IBonsaiRelay} from "bonsai/IBonsaiRelay.sol";
import {StorageProofChecker} from "contracts/StorageProofChecker.sol";

contract StorageProofCheckerTest is BonsaiTest {
    function setUp() public withRelay {}

    function testMockCall1() public {
        // Deploy a new starter instance
        StorageProofChecker storageProofChecker = new StorageProofChecker(
            IBonsaiRelay(bonsaiRelay),
            queryImageId('FIBONACCI'));

        // Anticipate a callback request to the relay
        vm.expectCall(address(bonsaiRelay), abi.encodeWithSelector(IBonsaiRelay.requestCallback.selector));
        // Request the callback
        uint256 test_id = 3;

        // pass on the string that contains json of storage proof object

        // this example works, obtained from Optimism Goerli with following params:
        // let contractAddress = '0x4200000000000000000000000000000000000015'
        // const storageProof = await web3.eth.getProof(contractAddress, ['0x0000000000000000000000000000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000000000000000000000000001'], 15537749);

        // Response:
        // [
        //   {
        //     key: '0x0000000000000000000000000000000000000000000000000000000000000000',
        //     value: 31294965515717630825793436776n,
        //     proof: [
        //       '0xf90131a0fc7cc026d073721debf217bdef04129d3c546647a2f60041df9efe2d7566cdc280a0e6139c2a428503b918e190531bf8421c2de1cc9b33fbf1e578c467d8bdcc19a380a0615c5d2e3edcb1ac9ba05bcb7ea131c4cb775767e65c81a429fc2e581bfdf872a0231eba9c2bc1784b944714d5260873e3f92b58434c1879123d58f995b342865180a01921a75e9ea0f833d7e9c28af4243eb78178eb3fb7fefe37be4e816ea3b79b2aa0e957372a5d395d075f4b4add89a8a644dc7cb396111f91ed0f6438f4696ebb528080a0dd2b9fa91030a427fc97be1a455d5511125a6c610a7605676df54979f282c6afa040f61ef1c42bdf5b6916e65d3fedf546e3dd97a9cbcd25f575709cf1672ae7388080a07ec093943b7332b9a8de61f47ee3972a94f00c3ff4d82e15d204c23595fbf7d580',
        //       '0xefa0390decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638d8c651e96b8000000000095bc68'
        //     ]
        //   },
        //   {
        //     key: '0x0000000000000000000000000000000000000000000000000000000000000001',
        //     value: 10n,
        //     proof: [
        //       '0xf90131a0fc7cc026d073721debf217bdef04129d3c546647a2f60041df9efe2d7566cdc280a0e6139c2a428503b918e190531bf8421c2de1cc9b33fbf1e578c467d8bdcc19a380a0615c5d2e3edcb1ac9ba05bcb7ea131c4cb775767e65c81a429fc2e581bfdf872a0231eba9c2bc1784b944714d5260873e3f92b58434c1879123d58f995b342865180a01921a75e9ea0f833d7e9c28af4243eb78178eb3fb7fefe37be4e816ea3b79b2aa0e957372a5d395d075f4b4add89a8a644dc7cb396111f91ed0f6438f4696ebb528080a0dd2b9fa91030a427fc97be1a455d5511125a6c610a7605676df54979f282c6afa040f61ef1c42bdf5b6916e65d3fedf546e3dd97a9cbcd25f575709cf1672ae7388080a07ec093943b7332b9a8de61f47ee3972a94f00c3ff4d82e15d204c23595fbf7d580',
        //       '0xe2a0310e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60a'
        //     ]
        //   }
        // ]
        // Data put into a Rust object:
        // StorageProofInput {
        //     key: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1].to_vec(),
        //     proof: vec![
        //       [249, 1, 49, 160, 252, 124, 192, 38, 208, 115, 114, 29, 235, 242, 23, 189, 239, 4, 18, 157, 60, 84, 102, 71, 162, 246, 0, 65, 223, 158, 254, 45, 117, 102, 205, 194, 128, 160, 230, 19, 156, 42, 66, 133, 3, 185, 24, 225, 144, 83, 27, 248, 66, 28, 45, 225, 204, 155, 51, 251, 241, 229, 120, 196, 103, 216, 189, 204, 25, 163, 128, 160, 97, 92, 93, 46, 62, 220, 177, 172, 155, 160, 91, 203, 126, 161, 49, 196, 203, 119, 87, 103, 230, 92, 129, 164, 41, 252, 46, 88, 27, 253, 248, 114, 160, 35, 30, 186, 156, 43, 193, 120, 75, 148, 71, 20, 213, 38, 8, 115, 227, 249, 43, 88, 67, 76, 24, 121, 18, 61, 88, 249, 149, 179, 66, 134, 81, 128, 160, 25, 33, 167, 94, 158, 160, 248, 51, 215, 233, 194, 138, 244, 36, 62, 183, 129, 120, 235, 63, 183, 254, 254, 55, 190, 78, 129, 110, 163, 183, 155, 42, 160, 233, 87, 55, 42, 93, 57, 93, 7, 95, 75, 74, 221, 137, 168, 166, 68, 220, 124, 179, 150, 17, 31, 145, 237, 15, 100, 56, 244, 105, 110, 187, 82, 128, 128, 160, 221, 43, 159, 169, 16, 48, 164, 39, 252, 151, 190, 26, 69, 93, 85, 17, 18, 90, 108, 97, 10, 118, 5, 103, 109, 245, 73, 121, 242, 130, 198, 175, 160, 64, 246, 30, 241, 196, 43, 223, 91, 105, 22, 230, 93, 63, 237, 245, 70, 227, 221, 151, 169, 203, 205, 37, 245, 117, 112, 156, 241, 103, 42, 231, 56, 128, 128, 160, 126, 192, 147, 148, 59, 115, 50, 185, 168, 222, 97, 244, 126, 227, 151, 42, 148, 240, 12, 63, 244, 216, 46, 21, 210, 4, 194, 53, 149, 251, 247, 213, 128].to_vec(),
        //       [226, 160, 49, 14, 45, 82, 118, 18, 7, 59, 38, 238, 205, 253, 113, 126, 106, 50, 12, 244, 75, 74, 250, 194, 176, 115, 45, 159, 203, 226, 183, 250, 12, 246, 10].to_vec()
        //       ],
        //     root: [156, 199, 26, 25, 192, 154, 130, 142, 254, 193, 162, 211, 31, 121, 78, 22, 7, 45, 38, 220, 252, 53, 246, 85, 38, 12, 129, 104, 244, 127, 137, 222]
        //   };
        // this should give value 10 as a result
        // call for second storageProof:
        storageProofChecker.verifyStorageProof(test_id,  "{\"key\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\"proof\":[[249,1,49,160,252,124,192,38,208,115,114,29,235,242,23,189,239,4,18,157,60,84,102,71,162,246,0,65,223,158,254,45,117,102,205,194,128,160,230,19,156,42,66,133,3,185,24,225,144,83,27,248,66,28,45,225,204,155,51,251,241,229,120,196,103,216,189,204,25,163,128,160,97,92,93,46,62,220,177,172,155,160,91,203,126,161,49,196,203,119,87,103,230,92,129,164,41,252,46,88,27,253,248,114,160,35,30,186,156,43,193,120,75,148,71,20,213,38,8,115,227,249,43,88,67,76,24,121,18,61,88,249,149,179,66,134,81,128,160,25,33,167,94,158,160,248,51,215,233,194,138,244,36,62,183,129,120,235,63,183,254,254,55,190,78,129,110,163,183,155,42,160,233,87,55,42,93,57,93,7,95,75,74,221,137,168,166,68,220,124,179,150,17,31,145,237,15,100,56,244,105,110,187,82,128,128,160,221,43,159,169,16,48,164,39,252,151,190,26,69,93,85,17,18,90,108,97,10,118,5,103,109,245,73,121,242,130,198,175,160,64,246,30,241,196,43,223,91,105,22,230,93,63,237,245,70,227,221,151,169,203,205,37,245,117,112,156,241,103,42,231,56,128,128,160,126,192,147,148,59,115,50,185,168,222,97,244,126,227,151,42,148,240,12,63,244,216,46,21,210,4,194,53,149,251,247,213,128],[226,160,49,14,45,82,118,18,7,59,38,238,205,253,113,126,106,50,12,244,75,74,250,194,176,115,45,159,203,226,183,250,12,246,10]],\"root\":[156,199,26,25,192,154,130,142,254,193,162,211,31,121,78,22,7,45,38,220,252,53,246,85,38,12,129,104,244,127,137,222]}");

        // Anticipate a callback invocation on the starter contract
        // vm.expectCall(address(storageProofChecker), abi.encodeWithSelector(StorageProofChecker.storeResult.selector));
        // Relay the solution as a callback
        runPendingCallbackRequest();

        // Check if the result is stored in the Smart Contract
        uint256 result = storageProofChecker.retrieveResult(test_id);
        console2.log("Result ", result); // forge test -vv
        assertEq(result, uint256(10)); 
    }


    function testMockCall2() public {
        // Deploy a new starter instance
        StorageProofChecker storageProofChecker = new StorageProofChecker(
            IBonsaiRelay(bonsaiRelay),
            queryImageId('FIBONACCI'));

        // Anticipate a callback request to the relay
        vm.expectCall(address(bonsaiRelay), abi.encodeWithSelector(IBonsaiRelay.requestCallback.selector));
        // Request the callback
        uint256 test_id = 876;
        // Second example
        /*
          storageHash: '0x8a60e721b3bf246d6489ea3878b28581d2b30d5f7975ce30a005db88bfa5d7e3',

        {
          key: '0x0000000000000000000000000000000000000000000000000000000000000002',
          value: 48n,
          proof: [
            '0xf90211a02dd5554c64da86a68d33e5b5a3da6e4ad9b3c1b8efbd26229f73632a4660bbb7a01c8e6b3f78ebbc05e85b49b353ca300bcf110ba72a804758550a0cdd9af5e231a058133aec0bb2afa1d28303f61d9c8b682ac39577ab3297d5999dc019d97147c1a0b15c278e442f334481a3e35f6ef10d0ff5b662f882feb4e87036b335ac67c5afa04732d4096b796d8901083bc4f647c713ae6756ecb8993f7e58d92e4388b9ed7ea0843af62b2974ba2fe5003a36f27069f9a663654ae1fa2ad2749e9d8757ef4f03a0e9ed04967de6d3149f7b97bc3211d8f8eed899eff3bd29f54d573725f470218fa05689dc89aa5ae46c5d3dd4dfae945ecd3802aef23927891b1e90930388b03fb7a0886290335ba548a82098757132472f46581dad6e3d9c7b6d268389bf8a45cbdfa0f784d4e2ccb18a5253a766adacf59be1e72215673bb9310610a7ac7639b43fa5a0ff0c106d9b81b1e34b2678480a8cf698099ea5b0d3f3487ad13e50b280e808b0a074a8000c6227783c69e9971a4cbd992be617a736dba4bb2cfc3ea1ed73a0404ca0de8a0df34220cd0bd3aa8f06d3d096fbce6d8ed46fc769ca2c0a43dbc0f2fc97a071f7d5b3584d01037515900949508e6d326798cc9a80ba46cfa23874d8e2b9f7a0634d332a990574cf90a3d7a358f412abaf3fecbeb990b94993c1d7fb4f4d0293a04e374742e5575a8bdaf4ba80fce343f884c6b59ea6040dafc544da9d46fcda9180',
            '0xf8f1a02a73a5b4e909bb2ed9520611744e3d20b441fcfffa523df18114fd3b33289d7780a00ddc966723ae79cb2062bd87d19340fe121eee60454ce607563a52669cd4fd0b80a0d01dd44c37b7bfdff81a44f967972fae34ac5451804c7b2494e258afbccd66a88080808080a01062555d66455b046ca8ca840d29d4d2d293132eb848317b4edef6ea0a505ecf80a00accc719c27a4944d31731d3c11e82d8406af432f6175dbb4e84e51908cdc01580a0b69cfe90bd7506dd91dab1e9aa664aa391d27914abbace3d98b542b44742f80aa0a4d0b16787f440098d7e7813b0fe1335e1fe73347d0ea4f3c3a71897665888f580',
            '0xe2a0205787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace30'
          ]
        }
        */ 
        // Obtained from Optimism Goerli with following params: (different contract, different block, 3 indices instead of 2)
        // let contractAddress = '0x111BAbcdd66b1B60A20152a2D3D06d36F8B5703c'
        // const storageProof = await web3.eth.getProof(contractAddress, ['0x0000000000000000000000000000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000000000000000000000000000002'], 15547749);

        storageProofChecker.verifyStorageProof(test_id, "{\"key\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\"proof\":[[249,2,17,160,45,213,85,76,100,218,134,166,141,51,229,181,163,218,110,74,217,179,193,184,239,189,38,34,159,115,99,42,70,96,187,183,160,28,142,107,63,120,235,188,5,232,91,73,179,83,202,48,11,207,17,11,167,42,128,71,88,85,10,12,221,154,245,226,49,160,88,19,58,236,11,178,175,161,210,131,3,246,29,156,139,104,42,195,149,119,171,50,151,213,153,157,192,25,217,113,71,193,160,177,92,39,142,68,47,51,68,129,163,227,95,110,241,13,15,245,182,98,248,130,254,180,232,112,54,179,53,172,103,197,175,160,71,50,212,9,107,121,109,137,1,8,59,196,246,71,199,19,174,103,86,236,184,153,63,126,88,217,46,67,136,185,237,126,160,132,58,246,43,41,116,186,47,229,0,58,54,242,112,105,249,166,99,101,74,225,250,42,210,116,158,157,135,87,239,79,3,160,233,237,4,150,125,230,211,20,159,123,151,188,50,17,216,248,238,216,153,239,243,189,41,245,77,87,55,37,244,112,33,143,160,86,137,220,137,170,90,228,108,93,61,212,223,174,148,94,205,56,2,174,242,57,39,137,27,30,144,147,3,136,176,63,183,160,136,98,144,51,91,165,72,168,32,152,117,113,50,71,47,70,88,29,173,110,61,156,123,109,38,131,137,191,138,69,203,223,160,247,132,212,226,204,177,138,82,83,167,102,173,172,245,155,225,231,34,21,103,59,185,49,6,16,167,172,118,57,180,63,165,160,255,12,16,109,155,129,177,227,75,38,120,72,10,140,246,152,9,158,165,176,211,243,72,122,209,62,80,178,128,232,8,176,160,116,168,0,12,98,39,120,60,105,233,151,26,76,189,153,43,230,23,167,54,219,164,187,44,252,62,161,237,115,160,64,76,160,222,138,13,243,66,32,205,11,211,170,143,6,211,208,150,251,206,109,142,212,111,199,105,202,44,10,67,219,192,242,252,151,160,113,247,213,179,88,77,1,3,117,21,144,9,73,80,142,109,50,103,152,204,154,128,186,70,207,162,56,116,216,226,185,247,160,99,77,51,42,153,5,116,207,144,163,215,163,88,244,18,171,175,63,236,190,185,144,185,73,147,193,215,251,79,77,2,147,160,78,55,71,66,229,87,90,139,218,244,186,128,252,227,67,248,132,198,181,158,166,4,13,175,197,68,218,157,70,252,218,145,128],[248,241,160,42,115,165,180,233,9,187,46,217,82,6,17,116,78,61,32,180,65,252,255,250,82,61,241,129,20,253,59,51,40,157,119,128,160,13,220,150,103,35,174,121,203,32,98,189,135,209,147,64,254,18,30,238,96,69,76,230,7,86,58,82,102,156,212,253,11,128,160,208,29,212,76,55,183,191,223,248,26,68,249,103,151,47,174,52,172,84,81,128,76,123,36,148,226,88,175,188,205,102,168,128,128,128,128,128,160,16,98,85,93,102,69,91,4,108,168,202,132,13,41,212,210,210,147,19,46,184,72,49,123,78,222,246,234,10,80,94,207,128,160,10,204,199,25,194,122,73,68,211,23,49,211,193,30,130,216,64,106,244,50,246,23,93,187,78,132,229,25,8,205,192,21,128,160,182,156,254,144,189,117,6,221,145,218,177,233,170,102,74,163,145,210,121,20,171,186,206,61,152,181,66,180,71,66,248,10,160,164,208,177,103,135,244,64,9,141,126,120,19,176,254,19,53,225,254,115,52,125,14,164,243,195,167,24,151,102,88,136,245,128],[226,160,32,87,135,250,18,168,35,224,242,183,99,28,196,27,59,168,130,139,51,33,202,129,17,17,250,117,205,58,163,187,90,206,48]],\"root\":[138,96,231,33,179,191,36,109,100,137,234,56,120,178,133,129,210,179,13,95,121,117,206,48,160,5,219,136,191,165,215,227]}");

        // Anticipate a callback invocation on the starter contract
        vm.expectCall(address(storageProofChecker), abi.encodeWithSelector(StorageProofChecker.storeResult.selector));
        // Relay the solution as a callback
        runPendingCallbackRequest();

        // Check if the result is stored in the Smart Contract
        uint256 result = storageProofChecker.retrieveResult(test_id);
        console2.log("Result ", result); // forge test -vv
        assertEq(result, uint256(48)); 
    }
}
